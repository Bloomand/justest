{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.iso7064Check = iso7064Check;\nexports.luhnCheck = luhnCheck;\nexports.reverseMultiplyAndSum = reverseMultiplyAndSum;\nexports.verhoeffCheck = verhoeffCheck;\n\n/**\r\n * Algorithmic validation functions\r\n * May be used as is or implemented in the workflow of other validators.\r\n */\n\n/*\r\n * ISO 7064 validation function\r\n * Called with a string of numbers (incl. check digit)\r\n * to validate according to ISO 7064 (MOD 11, 10).\r\n */\nfunction iso7064Check(str) {\n  var checkvalue = 10;\n  for (var i = 0; i < str.length - 1; i++) {\n    checkvalue = (parseInt(str[i], 10) + checkvalue) % 10 === 0 ? 10 * 2 % 11 : (parseInt(str[i], 10) + checkvalue) % 10 * 2 % 11;\n  }\n  checkvalue = checkvalue === 1 ? 0 : 11 - checkvalue;\n  return checkvalue === parseInt(str[10], 10);\n}\n/*\r\n * Luhn (mod 10) validation function\r\n * Called with a string of numbers (incl. check digit)\r\n * to validate according to the Luhn algorithm.\r\n */\n\nfunction luhnCheck(str) {\n  var checksum = 0;\n  var second = false;\n  for (var i = str.length - 1; i >= 0; i--) {\n    if (second) {\n      var product = parseInt(str[i], 10) * 2;\n      if (product > 9) {\n        // sum digits of product and add to checksum\n        checksum += product.toString().split('').map(function (a) {\n          return parseInt(a, 10);\n        }).reduce(function (a, b) {\n          return a + b;\n        }, 0);\n      } else {\n        checksum += product;\n      }\n    } else {\n      checksum += parseInt(str[i], 10);\n    }\n    second = !second;\n  }\n  return checksum % 10 === 0;\n}\n/*\r\n * Reverse TIN multiplication and summation helper function\r\n * Called with an array of single-digit integers and a base multiplier\r\n * to calculate the sum of the digits multiplied in reverse.\r\n * Normally used in variations of MOD 11 algorithmic checks.\r\n */\n\nfunction reverseMultiplyAndSum(digits, base) {\n  var total = 0;\n  for (var i = 0; i < digits.length; i++) {\n    total += digits[i] * (base - i);\n  }\n  return total;\n}\n/*\r\n * Verhoeff validation helper function\r\n * Called with a string of numbers\r\n * to validate according to the Verhoeff algorithm.\r\n */\n\nfunction verhoeffCheck(str) {\n  var d_table = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 0, 6, 7, 8, 9, 5], [2, 3, 4, 0, 1, 7, 8, 9, 5, 6], [3, 4, 0, 1, 2, 8, 9, 5, 6, 7], [4, 0, 1, 2, 3, 9, 5, 6, 7, 8], [5, 9, 8, 7, 6, 0, 4, 3, 2, 1], [6, 5, 9, 8, 7, 1, 0, 4, 3, 2], [7, 6, 5, 9, 8, 2, 1, 0, 4, 3], [8, 7, 6, 5, 9, 3, 2, 1, 0, 4], [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]];\n  var p_table = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 5, 7, 6, 2, 8, 3, 0, 9, 4], [5, 8, 0, 3, 7, 9, 6, 1, 4, 2], [8, 9, 1, 6, 0, 4, 3, 5, 2, 7], [9, 4, 5, 3, 1, 2, 6, 8, 7, 0], [4, 2, 8, 6, 5, 7, 3, 9, 0, 1], [2, 7, 9, 3, 8, 0, 6, 4, 1, 5], [7, 0, 4, 6, 9, 1, 3, 2, 5, 8]]; // Copy (to prevent replacement) and reverse\n\n  var str_copy = str.split('').reverse().join('');\n  var checksum = 0;\n  for (var i = 0; i < str_copy.length; i++) {\n    checksum = d_table[checksum][p_table[i % 8][parseInt(str_copy[i], 10)]];\n  }\n  return checksum === 0;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","iso7064Check","luhnCheck","reverseMultiplyAndSum","verhoeffCheck","str","checkvalue","i","length","parseInt","checksum","second","product","toString","split","map","a","reduce","b","digits","base","total","d_table","p_table","str_copy","reverse","join"],"sources":["D:/GitHub/TP2/just-test-front/justest/node_modules/validator/lib/util/algorithms.js"],"sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.iso7064Check = iso7064Check;\r\nexports.luhnCheck = luhnCheck;\r\nexports.reverseMultiplyAndSum = reverseMultiplyAndSum;\r\nexports.verhoeffCheck = verhoeffCheck;\r\n\r\n/**\r\n * Algorithmic validation functions\r\n * May be used as is or implemented in the workflow of other validators.\r\n */\r\n\r\n/*\r\n * ISO 7064 validation function\r\n * Called with a string of numbers (incl. check digit)\r\n * to validate according to ISO 7064 (MOD 11, 10).\r\n */\r\nfunction iso7064Check(str) {\r\n  var checkvalue = 10;\r\n\r\n  for (var i = 0; i < str.length - 1; i++) {\r\n    checkvalue = (parseInt(str[i], 10) + checkvalue) % 10 === 0 ? 10 * 2 % 11 : (parseInt(str[i], 10) + checkvalue) % 10 * 2 % 11;\r\n  }\r\n\r\n  checkvalue = checkvalue === 1 ? 0 : 11 - checkvalue;\r\n  return checkvalue === parseInt(str[10], 10);\r\n}\r\n/*\r\n * Luhn (mod 10) validation function\r\n * Called with a string of numbers (incl. check digit)\r\n * to validate according to the Luhn algorithm.\r\n */\r\n\r\n\r\nfunction luhnCheck(str) {\r\n  var checksum = 0;\r\n  var second = false;\r\n\r\n  for (var i = str.length - 1; i >= 0; i--) {\r\n    if (second) {\r\n      var product = parseInt(str[i], 10) * 2;\r\n\r\n      if (product > 9) {\r\n        // sum digits of product and add to checksum\r\n        checksum += product.toString().split('').map(function (a) {\r\n          return parseInt(a, 10);\r\n        }).reduce(function (a, b) {\r\n          return a + b;\r\n        }, 0);\r\n      } else {\r\n        checksum += product;\r\n      }\r\n    } else {\r\n      checksum += parseInt(str[i], 10);\r\n    }\r\n\r\n    second = !second;\r\n  }\r\n\r\n  return checksum % 10 === 0;\r\n}\r\n/*\r\n * Reverse TIN multiplication and summation helper function\r\n * Called with an array of single-digit integers and a base multiplier\r\n * to calculate the sum of the digits multiplied in reverse.\r\n * Normally used in variations of MOD 11 algorithmic checks.\r\n */\r\n\r\n\r\nfunction reverseMultiplyAndSum(digits, base) {\r\n  var total = 0;\r\n\r\n  for (var i = 0; i < digits.length; i++) {\r\n    total += digits[i] * (base - i);\r\n  }\r\n\r\n  return total;\r\n}\r\n/*\r\n * Verhoeff validation helper function\r\n * Called with a string of numbers\r\n * to validate according to the Verhoeff algorithm.\r\n */\r\n\r\n\r\nfunction verhoeffCheck(str) {\r\n  var d_table = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 0, 6, 7, 8, 9, 5], [2, 3, 4, 0, 1, 7, 8, 9, 5, 6], [3, 4, 0, 1, 2, 8, 9, 5, 6, 7], [4, 0, 1, 2, 3, 9, 5, 6, 7, 8], [5, 9, 8, 7, 6, 0, 4, 3, 2, 1], [6, 5, 9, 8, 7, 1, 0, 4, 3, 2], [7, 6, 5, 9, 8, 2, 1, 0, 4, 3], [8, 7, 6, 5, 9, 3, 2, 1, 0, 4], [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]];\r\n  var p_table = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 5, 7, 6, 2, 8, 3, 0, 9, 4], [5, 8, 0, 3, 7, 9, 6, 1, 4, 2], [8, 9, 1, 6, 0, 4, 3, 5, 2, 7], [9, 4, 5, 3, 1, 2, 6, 8, 7, 0], [4, 2, 8, 6, 5, 7, 3, 9, 0, 1], [2, 7, 9, 3, 8, 0, 6, 4, 1, 5], [7, 0, 4, 6, 9, 1, 3, 2, 5, 8]]; // Copy (to prevent replacement) and reverse\r\n\r\n  var str_copy = str.split('').reverse().join('');\r\n  var checksum = 0;\r\n\r\n  for (var i = 0; i < str_copy.length; i++) {\r\n    checksum = d_table[checksum][p_table[i % 8][parseInt(str_copy[i], 10)]];\r\n  }\r\n\r\n  return checksum === 0;\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}